{"version":2,"kind":"Notebook","sha256":"adec38f3864d69631c0831c93a37a487b1387e27220cc32cff986eead9c3802e","slug":"gfm-dask-objectstorage","location":"/source/services/GFM/gfm_dask_objectstorage.ipynb","dependencies":[],"frontmatter":{"title":"Save GFM results in cloud object store","subtitle":"In this demo we will show you how to remotely process data on the EODC cluster using dask and save the result in a cloud object store.","tags":["GFM"],"copyright":"Â© 2024 eodc","authors":[{"id":"Author: eodc","name":"Author: eodc"}],"license":{"content":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"thumbnail":"/e09f7271f6c188a68020a7d6a49ba21c.svg","kernelspec":{"name":"python3","display_name":".venv","language":"python"},"numbering":{"title":{"offset":2}},"exports":[{"format":"ipynb","filename":"gfm_dask_objectstorage.ipynb","url":"/gfm_dask_objectstora-afaa3e93f63a1f58128b6b589b20f310.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In a final step, we will\nread parts of the result back and plot it directly on our local machine. Here, we will use our object\nstorage based on CEPH. Please see\n","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Th8RshGsiv"},{"type":"link","url":"https://docs.eodc.eu/services/objectstore.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AK5CJuxo4p"}],"urlSource":"https://docs.eodc.eu/services/objectstore.html","key":"UGyfzcZ37T"},{"type":"text","value":" for more\ninformation.\nFurthermore, this demo is partly based on the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PzVrNKmPSd"},{"type":"link","url":"https://docs.eodc.eu/tutorials/gfm_maximum_flood_extent_dask.html","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"EODC Dask\nTutorial","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"egofVPPlWr"}],"urlSource":"https://docs.eodc.eu/tutorials/gfm_maximum_flood_extent_dask.html","key":"Mt3Hb2yNUB"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yKbsDRholv"}],"key":"twZ1VNdJFF"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"As an example, we will calculate the maximum flood extent as well as the mean of\nthe GFM likelihood values for a certain time range over an area of interest in\nPakistan.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"cNUN8XgC76"}],"key":"OV55h61O0y"}],"key":"nvhq0WhJZU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OFvIjABLtJ"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"ZlcSu35oYK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Before we start, make sure you have installed all the necessary Python libraries and\npackages with the correct versions. It is important that the cluster and client\n(your machine) have the same versions for the key Python libraries. The easiest\nway is to create a new Python environment with the package manager of your liking.\nSee the required dependencies in the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qSmYx4mbit"},{"type":"link","url":"https://github.com/eodcgmbh/cluster_image","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"EODC cluster image","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YoJzjtVq3J"}],"urlSource":"https://github.com/eodcgmbh/cluster_image","error":true,"key":"euBCkX91Um"},{"type":"text","value":" repository.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DjFeUNkvvP"}],"key":"YKRGkEqLx3"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"In order to spin up a dedicated cluster on the EODC cluster, you will need to\nrequest an EODC account. Please follow the instructions ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"MzqfszI077"},{"type":"link","url":"https://docs.eodc.eu/services/dask.html#who-should-use-dask-gateway-at-eodc","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"w3uhKFBsAb"}],"urlSource":"https://docs.eodc.eu/services/dask.html#who-should-use-dask-gateway-at-eodc","key":"PCbZ5xBE7h"},{"type":"text","value":".","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Wxe5mobNoH"}],"key":"eke1EAptmA"}],"key":"gwBPpa45L0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First some imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mhhgoFwcuc"}],"identifier":"first-some-imports","label":"First some imports","html_id":"first-some-imports","implicit":true,"key":"iiTwovOT3i"}],"key":"yvXduUGPLq"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import s3fs\nimport pyproj\nimport rioxarray\nimport xarray as xr\nfrom datetime import datetime\nfrom shapely.geometry import box\nfrom pystac_client import Client\nfrom odc import stac as odc_stac\nimport matplotlib.pyplot as plt\n\nfrom eodc import settings\nfrom eodc.dask import EODCDaskGateway\n\nsettings.DASK_URL = \"http://dask.services.eodc.eu\"\nsettings.DASK_URL_TCP = \"tcp://dask.services.eodc.eu:80/\"","key":"uMzKtKZ1W5"},{"type":"output","id":"3NRLdcIYBt1SvMqOgcObP","data":[],"key":"vSKgtHvpku"}],"key":"R1XfkNQk7y"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Initialize cluster","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SnjKXuH7Xx"}],"identifier":"initialize-cluster","label":"Initialize cluster","html_id":"initialize-cluster","implicit":true,"key":"UpHarZyZXp"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Your username of your EODC account come here, usually it is your email address\nyou have used for registration.\nAfter running the next cell, a prompt will open and ask you to enter your\npassword.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kAWR4vQix8"}],"key":"wKU7BWlmY3"}],"key":"NXPveN3qK5"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"your_username = \"your.email@address.com\"\ngateway = EODCDaskGateway(username=your_username)","key":"PSGFRndYDL"},{"type":"output","id":"VW0Qv1iPG7m6NChO3aiPT","data":[],"key":"YyHabYKBrE"}],"key":"rXKPJcVpHK"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Once authenticated, you can specify the details of your cluster.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KDHt7OWhgw"}],"key":"FbF4OKqJKO"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"A new cluster will be created. Use the URL, which is printed after running the\nnext cell to get an overview what is currently happening on your cluster.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nLNXo9Y24V"}],"key":"zO9SRourc5"}],"key":"XjYuoBzFUj"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define cluster options\ncluster_options = gateway.cluster_options()\n\n# Set the number of cores per worker\ncluster_options.worker_cores = 8\n\n# Set the memory per worker (in GB)\ncluster_options.worker_memory = 16\n\n# Specify the Docker image to use for the workers\ncluster_options.image = \"ghcr.io/eodcgmbh/cluster_image:2025.2.0\"\n\n# Create a new cluster with the specified options\ncluster = gateway.new_cluster(cluster_options)\n\n# Automatically scale the cluster between 1 and 10 workers based on workload\ncluster.adapt(1, 10)  \n\n# Optionally, scale the cluster to use only one worker\n# cluster.scale(1)\n\n# Get a Dask client for the cluster\nclient = cluster.get_client()\nclient.dashboard_link","key":"JwSDg4Q0IJ"},{"type":"output","id":"FARpj0-q1ZQAtVbB7zmJZ","data":[],"key":"fUHd8BWQlY"}],"key":"tTq1ncCQCy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Search and load data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nj3SaGrJVh"}],"identifier":"search-and-load-data","label":"Search and load data","html_id":"search-and-load-data","implicit":true,"key":"Rv3pd2yVN2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Now we will define our area (AOI) and time range of interest for which we want\nto calculate the maximum flood extent as well as the mean of the likelihood.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tMjDbJ8aPH"}],"key":"cPzeJ1wvXv"}],"key":"GW68X77V4T"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Define the API URL\napi_url = \"https://stac.eodc.eu/api/v1\"\n\n# Define the STAC collection ID\ncollection_id = \"GFM\"\n\n# Define the area of interest (AOI) as a bounding box\naoi = box(67.398376, 26.197341, 69.027100, 27.591066)\n\n# Define the time range for the search\ntime_range = (datetime(2022, 9, 1), datetime(2022, 10, 1))\n\n# Open the STAC catalog using the specified API URL\neodc_catalog = Client.open(api_url)\n\n# Perform a search in the catalog with the specified parameters\nsearch = eodc_catalog.search(\n    max_items=1000,             # Maximum number of items to return\n    collections=collection_id,  # The collection to search within\n    intersects=aoi,             # The area of interest\n    datetime=time_range         # The time range for the search\n)\n\n# Collect the found items into an item collection\nitems = search.item_collection()\n\nprint(f\"On EODC we found {len(items)} items for the given search query\")","key":"ZMnegOySGV"},{"type":"output","id":"LhMmgYqac4d29aC9RiiQX","data":[{"name":"stdout","output_type":"stream","text":"On EODC we found 157 items for the given search query\n"}],"key":"tiQFNdiRbl"}],"key":"PtLuAQk6ni"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The data will be lazy-loaded into a xarray.Dataset object.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CrnPaCWlEX"}],"key":"N3d4urVTFo"}],"key":"oof4Fm5n9r"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Extract the coordinate reference system (CRS) from the first item's properties\ncrs = pyproj.CRS.from_wkt(items[0].properties[\"proj:wkt2\"])\n\n# Set the resolution of the data\nresolution = items[0].properties['gsd']\n\n# Specify the bands to load\nbands = [\"ensemble_flood_extent\", \"ensemble_likelihood\"]\n\n# Load the data using odc-stac with the specified parameters\nxx = odc_stac.load(\n    items, \n    bbox=aoi.bounds,   # Define the bounding box for the area of interest\n    crs=crs,   # Set the coordinate reference system\n    bands=bands,   # Specify the bands to load\n    resolution=resolution,   # Set the resolution of the data\n    dtype='uint8',   # Define the data type\n    chunks={\"x\": 1000, \"y\": 1000, \"time\": -1},  # Set the chunk size for Dask\n)","key":"PKdG04RUQh"},{"type":"output","id":"2uNiqZmjQgITzD1BCmVJH","data":[],"key":"iHCyRLBGxe"}],"key":"nrRI6zULYG"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Create a ZARR store object by specifying the endpoint_url, bucket_name and\ncredentials of your object storage (e.g. EODC object store, AWS S3).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vuACHXmT8r"}],"key":"NRpqCokTNa"}],"key":"hAn24vHoCF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Specify the endpoint_url of your object storage\nendpoint_url = '<endpoint_url>'\n\n# Specify the name of your S3 bucket\ns3_bucket = '<bucket_name>'\n\n# Specify the credentials for accessing your S3 bucket\nkey = '<key>'\nsecret = '<secret>'\n\n# Create a S3FileSystem object\ns3fs_central = s3fs.S3FileSystem(\n    key=key,\n    secret=secret,\n    client_kwargs={'endpoint_url': endpoint_url},\n)\n\n# Specify the filename of your output ZARR file\npath = f'{s3_bucket}/gfm_flood_likelihood_pakistan_202209.zarr'\n\n# Create the ZARR store object\nzarr_store = s3fs.S3Map(root=path, s3=s3fs_central, check=False)","key":"E1IsQl41hZ"},{"type":"output","id":"0B8Jyw5cwm20srkZR_Zig","data":[],"key":"noQBIRQqWj"}],"key":"fKxlEAKJCC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Process on the cluster","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BFA54eTjEq"}],"identifier":"process-on-the-cluster","label":"Process on the cluster","html_id":"process-on-the-cluster","implicit":true,"key":"S2me1NsugY"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"For each of the data variables, we will define an own âprocess graphâ. The\nmaximum flood extent refers to the largest area covered by flooded pixels during\nthe specified time range. For the ensemble likelihood, we will calculate the\nmean values.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HVuMmDAowP"}],"key":"eLDvKOCW4u"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"As a final step, we will trigger the computation on the Dask cluster and save\ndirectly the result to the specified ZARR store on our cloud object storage.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"HM26P2CTlH"}],"key":"wiBFLlf3TS"}],"key":"Aa2Ga6yebH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"results = {}\n\n# ensemble_flood_extent\nvar = 'ensemble_flood_extent'\nflood_extent = xx[var].where((xx[var] != 255) & (xx[var] != 0)).sum(dim=\"time\")\nresults[var] = xr.where(flood_extent > 0, 1, 0).astype(\"uint8\")\n\n# ensemble_likelihood\nvar = 'ensemble_likelihood'\nresults[var] = xx[var].where((xx[var] != 255) & (xx[var] != 0)).mean(dim=\"time\").astype(\"uint8\")\n\n# Combine the results into a new dataset\nresult_dataset = xr.Dataset(results)\n\n# Trigger computation and save the result directly to the specified ZARR store\nresult_dataset.compute(sync=True).to_zarr(store=zarr_store, mode=\"w\")","key":"dgU6JGs0T8"},{"type":"output","id":"zq1ymVZEWclFvTkocmOez","data":[],"key":"PsEKWjSyIu"}],"key":"JHS3kLllHh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Shutdown cluster","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hTXqk34Sh8"}],"identifier":"shutdown-cluster","label":"Shutdown cluster","html_id":"shutdown-cluster","implicit":true,"key":"wNL59TbTaW"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"After successful computation we can shutdown the cluster","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"o2mt0s8DVL"}],"key":"ndEsWIKAIS"}],"key":"shLseC5DtR"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cluster.close(shutdown=True)","key":"JcOcEeEOvu"},{"type":"output","id":"hk-oldfvHDOlMAxZd43g8","data":[],"key":"uMNRgAdIER"}],"key":"VY5xWmlJFF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Visualize results","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yoyuYecRW3"}],"identifier":"visualize-results","label":"Visualize results","html_id":"visualize-results","implicit":true,"key":"KDPKXTVWV1"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"To demonstrate that we do not need to download the whole file, we will only plot\nparts of one calculated data variable (mean of ensemble likelihood).","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Zsi0uzYLvt"}],"key":"hQXnEauq4l"}],"key":"BdzZXsoNzW"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Lazy-load the ZARR store with xarray\nds = xr.open_zarr(store=zarr_store)\n\n# Plot parts of mean of ensemble likelihood\nplt.figure()\nds.ensemble_likelihood[:5000, :5000].plot(cmap=\"Reds\")\nplt.title(\"Mean of GFM Likelihood Pakistan September 2022\")\nplt.show()","key":"oYSSVhI3g8"},{"type":"output","id":"9gf1KVL2ot7zPWMteDInf","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"054fd18ebb2172d3b78f7f29ee0621e1","path":"/054fd18ebb2172d3b78f7f29ee0621e1.png"},"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"}}}],"key":"pDV0SHCScw"}],"key":"pbVXfaGgzD"}],"key":"uiXcFWZ6hJ"},"references":{"cite":{"order":[],"data":{}}}}